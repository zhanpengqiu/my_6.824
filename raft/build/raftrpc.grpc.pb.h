// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raftrpc.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_raftrpc_2eproto__INCLUDED
#define GRPC_raftrpc_2eproto__INCLUDED

#include "raftrpc.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace RpcModule {

// The greeting service definition.
class Rafter final {
 public:
  static constexpr char const* service_full_name() {
    return "RpcModule.Rafter";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // 如果这个为空，则视为心跳包，可以携带信息
    virtual ::grpc::Status Appendntries(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest& request, ::RpcModule::AppendntriesReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::AppendntriesReply>> AsyncAppendntries(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::AppendntriesReply>>(AsyncAppendntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::AppendntriesReply>> PrepareAsyncAppendntries(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::AppendntriesReply>>(PrepareAsyncAppendntriesRaw(context, request, cq));
    }
    virtual ::grpc::Status RequestVote(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest& request, ::RpcModule::RequestVoteReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::RequestVoteReply>> AsyncRequestVote(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::RequestVoteReply>>(AsyncRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::RequestVoteReply>> PrepareAsyncRequestVote(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::RequestVoteReply>>(PrepareAsyncRequestVoteRaw(context, request, cq));
    }
    virtual ::grpc::Status InstallSnapshot(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest& request, ::RpcModule::InstallSnapshotReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::InstallSnapshotReply>> AsyncInstallSnapshot(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::InstallSnapshotReply>>(AsyncInstallSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::InstallSnapshotReply>> PrepareAsyncInstallSnapshot(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::InstallSnapshotReply>>(PrepareAsyncInstallSnapshotRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // 如果这个为空，则视为心跳包，可以携带信息
      virtual void Appendntries(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest* request, ::RpcModule::AppendntriesReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Appendntries(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest* request, ::RpcModule::AppendntriesReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void RequestVote(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest* request, ::RpcModule::RequestVoteReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RequestVote(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest* request, ::RpcModule::RequestVoteReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void InstallSnapshot(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest* request, ::RpcModule::InstallSnapshotReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void InstallSnapshot(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest* request, ::RpcModule::InstallSnapshotReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::AppendntriesReply>* AsyncAppendntriesRaw(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::AppendntriesReply>* PrepareAsyncAppendntriesRaw(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::RequestVoteReply>* AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::RequestVoteReply>* PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::InstallSnapshotReply>* AsyncInstallSnapshotRaw(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::InstallSnapshotReply>* PrepareAsyncInstallSnapshotRaw(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Appendntries(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest& request, ::RpcModule::AppendntriesReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::AppendntriesReply>> AsyncAppendntries(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::AppendntriesReply>>(AsyncAppendntriesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::AppendntriesReply>> PrepareAsyncAppendntries(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::AppendntriesReply>>(PrepareAsyncAppendntriesRaw(context, request, cq));
    }
    ::grpc::Status RequestVote(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest& request, ::RpcModule::RequestVoteReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::RequestVoteReply>> AsyncRequestVote(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::RequestVoteReply>>(AsyncRequestVoteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::RequestVoteReply>> PrepareAsyncRequestVote(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::RequestVoteReply>>(PrepareAsyncRequestVoteRaw(context, request, cq));
    }
    ::grpc::Status InstallSnapshot(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest& request, ::RpcModule::InstallSnapshotReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::InstallSnapshotReply>> AsyncInstallSnapshot(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::InstallSnapshotReply>>(AsyncInstallSnapshotRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::InstallSnapshotReply>> PrepareAsyncInstallSnapshot(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::InstallSnapshotReply>>(PrepareAsyncInstallSnapshotRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Appendntries(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest* request, ::RpcModule::AppendntriesReply* response, std::function<void(::grpc::Status)>) override;
      void Appendntries(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest* request, ::RpcModule::AppendntriesReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RequestVote(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest* request, ::RpcModule::RequestVoteReply* response, std::function<void(::grpc::Status)>) override;
      void RequestVote(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest* request, ::RpcModule::RequestVoteReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void InstallSnapshot(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest* request, ::RpcModule::InstallSnapshotReply* response, std::function<void(::grpc::Status)>) override;
      void InstallSnapshot(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest* request, ::RpcModule::InstallSnapshotReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::RpcModule::AppendntriesReply>* AsyncAppendntriesRaw(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RpcModule::AppendntriesReply>* PrepareAsyncAppendntriesRaw(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RpcModule::RequestVoteReply>* AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RpcModule::RequestVoteReply>* PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RpcModule::InstallSnapshotReply>* AsyncInstallSnapshotRaw(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RpcModule::InstallSnapshotReply>* PrepareAsyncInstallSnapshotRaw(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Appendntries_;
    const ::grpc::internal::RpcMethod rpcmethod_RequestVote_;
    const ::grpc::internal::RpcMethod rpcmethod_InstallSnapshot_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // 如果这个为空，则视为心跳包，可以携带信息
    virtual ::grpc::Status Appendntries(::grpc::ServerContext* context, const ::RpcModule::AppendntriesRequest* request, ::RpcModule::AppendntriesReply* response);
    virtual ::grpc::Status RequestVote(::grpc::ServerContext* context, const ::RpcModule::RequestVoteRequest* request, ::RpcModule::RequestVoteReply* response);
    virtual ::grpc::Status InstallSnapshot(::grpc::ServerContext* context, const ::RpcModule::InstallSnapshotRequest* request, ::RpcModule::InstallSnapshotReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Appendntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Appendntries() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Appendntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Appendntries(::grpc::ServerContext* /*context*/, const ::RpcModule::AppendntriesRequest* /*request*/, ::RpcModule::AppendntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendntries(::grpc::ServerContext* context, ::RpcModule::AppendntriesRequest* request, ::grpc::ServerAsyncResponseWriter< ::RpcModule::AppendntriesReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RequestVote() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::RpcModule::RequestVoteRequest* /*request*/, ::RpcModule::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestVote(::grpc::ServerContext* context, ::RpcModule::RequestVoteRequest* request, ::grpc::ServerAsyncResponseWriter< ::RpcModule::RequestVoteReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_InstallSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_InstallSnapshot() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_InstallSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapshot(::grpc::ServerContext* /*context*/, const ::RpcModule::InstallSnapshotRequest* /*request*/, ::RpcModule::InstallSnapshotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstallSnapshot(::grpc::ServerContext* context, ::RpcModule::InstallSnapshotRequest* request, ::grpc::ServerAsyncResponseWriter< ::RpcModule::InstallSnapshotReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Appendntries<WithAsyncMethod_RequestVote<WithAsyncMethod_InstallSnapshot<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Appendntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Appendntries() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::RpcModule::AppendntriesRequest, ::RpcModule::AppendntriesReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RpcModule::AppendntriesRequest* request, ::RpcModule::AppendntriesReply* response) { return this->Appendntries(context, request, response); }));}
    void SetMessageAllocatorFor_Appendntries(
        ::grpc::MessageAllocator< ::RpcModule::AppendntriesRequest, ::RpcModule::AppendntriesReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RpcModule::AppendntriesRequest, ::RpcModule::AppendntriesReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Appendntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Appendntries(::grpc::ServerContext* /*context*/, const ::RpcModule::AppendntriesRequest* /*request*/, ::RpcModule::AppendntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Appendntries(
      ::grpc::CallbackServerContext* /*context*/, const ::RpcModule::AppendntriesRequest* /*request*/, ::RpcModule::AppendntriesReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RequestVote() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::RpcModule::RequestVoteRequest, ::RpcModule::RequestVoteReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RpcModule::RequestVoteRequest* request, ::RpcModule::RequestVoteReply* response) { return this->RequestVote(context, request, response); }));}
    void SetMessageAllocatorFor_RequestVote(
        ::grpc::MessageAllocator< ::RpcModule::RequestVoteRequest, ::RpcModule::RequestVoteReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RpcModule::RequestVoteRequest, ::RpcModule::RequestVoteReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::RpcModule::RequestVoteRequest* /*request*/, ::RpcModule::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestVote(
      ::grpc::CallbackServerContext* /*context*/, const ::RpcModule::RequestVoteRequest* /*request*/, ::RpcModule::RequestVoteReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_InstallSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_InstallSnapshot() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::RpcModule::InstallSnapshotRequest, ::RpcModule::InstallSnapshotReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RpcModule::InstallSnapshotRequest* request, ::RpcModule::InstallSnapshotReply* response) { return this->InstallSnapshot(context, request, response); }));}
    void SetMessageAllocatorFor_InstallSnapshot(
        ::grpc::MessageAllocator< ::RpcModule::InstallSnapshotRequest, ::RpcModule::InstallSnapshotReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RpcModule::InstallSnapshotRequest, ::RpcModule::InstallSnapshotReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_InstallSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapshot(::grpc::ServerContext* /*context*/, const ::RpcModule::InstallSnapshotRequest* /*request*/, ::RpcModule::InstallSnapshotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InstallSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::RpcModule::InstallSnapshotRequest* /*request*/, ::RpcModule::InstallSnapshotReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Appendntries<WithCallbackMethod_RequestVote<WithCallbackMethod_InstallSnapshot<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Appendntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Appendntries() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Appendntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Appendntries(::grpc::ServerContext* /*context*/, const ::RpcModule::AppendntriesRequest* /*request*/, ::RpcModule::AppendntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RequestVote() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::RpcModule::RequestVoteRequest* /*request*/, ::RpcModule::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_InstallSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_InstallSnapshot() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_InstallSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapshot(::grpc::ServerContext* /*context*/, const ::RpcModule::InstallSnapshotRequest* /*request*/, ::RpcModule::InstallSnapshotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Appendntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Appendntries() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Appendntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Appendntries(::grpc::ServerContext* /*context*/, const ::RpcModule::AppendntriesRequest* /*request*/, ::RpcModule::AppendntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAppendntries(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RequestVote() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::RpcModule::RequestVoteRequest* /*request*/, ::RpcModule::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRequestVote(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_InstallSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_InstallSnapshot() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_InstallSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapshot(::grpc::ServerContext* /*context*/, const ::RpcModule::InstallSnapshotRequest* /*request*/, ::RpcModule::InstallSnapshotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestInstallSnapshot(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Appendntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Appendntries() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Appendntries(context, request, response); }));
    }
    ~WithRawCallbackMethod_Appendntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Appendntries(::grpc::ServerContext* /*context*/, const ::RpcModule::AppendntriesRequest* /*request*/, ::RpcModule::AppendntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Appendntries(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RequestVote() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RequestVote(context, request, response); }));
    }
    ~WithRawCallbackMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::RpcModule::RequestVoteRequest* /*request*/, ::RpcModule::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RequestVote(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_InstallSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_InstallSnapshot() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->InstallSnapshot(context, request, response); }));
    }
    ~WithRawCallbackMethod_InstallSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status InstallSnapshot(::grpc::ServerContext* /*context*/, const ::RpcModule::InstallSnapshotRequest* /*request*/, ::RpcModule::InstallSnapshotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* InstallSnapshot(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Appendntries : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Appendntries() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RpcModule::AppendntriesRequest, ::RpcModule::AppendntriesReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RpcModule::AppendntriesRequest, ::RpcModule::AppendntriesReply>* streamer) {
                       return this->StreamedAppendntries(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Appendntries() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Appendntries(::grpc::ServerContext* /*context*/, const ::RpcModule::AppendntriesRequest* /*request*/, ::RpcModule::AppendntriesReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedAppendntries(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RpcModule::AppendntriesRequest,::RpcModule::AppendntriesReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RequestVote : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RequestVote() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RpcModule::RequestVoteRequest, ::RpcModule::RequestVoteReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RpcModule::RequestVoteRequest, ::RpcModule::RequestVoteReply>* streamer) {
                       return this->StreamedRequestVote(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RequestVote() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RequestVote(::grpc::ServerContext* /*context*/, const ::RpcModule::RequestVoteRequest* /*request*/, ::RpcModule::RequestVoteReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRequestVote(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RpcModule::RequestVoteRequest,::RpcModule::RequestVoteReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_InstallSnapshot : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_InstallSnapshot() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RpcModule::InstallSnapshotRequest, ::RpcModule::InstallSnapshotReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RpcModule::InstallSnapshotRequest, ::RpcModule::InstallSnapshotReply>* streamer) {
                       return this->StreamedInstallSnapshot(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_InstallSnapshot() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status InstallSnapshot(::grpc::ServerContext* /*context*/, const ::RpcModule::InstallSnapshotRequest* /*request*/, ::RpcModule::InstallSnapshotReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedInstallSnapshot(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RpcModule::InstallSnapshotRequest,::RpcModule::InstallSnapshotReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Appendntries<WithStreamedUnaryMethod_RequestVote<WithStreamedUnaryMethod_InstallSnapshot<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Appendntries<WithStreamedUnaryMethod_RequestVote<WithStreamedUnaryMethod_InstallSnapshot<Service > > > StreamedService;
};

}  // namespace RpcModule


#endif  // GRPC_raftrpc_2eproto__INCLUDED
