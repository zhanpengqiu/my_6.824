// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: raftrpc.proto

#include "raftrpc.pb.h"
#include "raftrpc.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace RpcModule {

static const char* Rafter_method_names[] = {
  "/RpcModule.Rafter/Appendntries",
  "/RpcModule.Rafter/RequestVote",
  "/RpcModule.Rafter/InstallSnapshot",
};

std::unique_ptr< Rafter::Stub> Rafter::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Rafter::Stub> stub(new Rafter::Stub(channel, options));
  return stub;
}

Rafter::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Appendntries_(Rafter_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RequestVote_(Rafter_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_InstallSnapshot_(Rafter_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Rafter::Stub::Appendntries(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest& request, ::RpcModule::AppendntriesReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RpcModule::AppendntriesRequest, ::RpcModule::AppendntriesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Appendntries_, context, request, response);
}

void Rafter::Stub::async::Appendntries(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest* request, ::RpcModule::AppendntriesReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RpcModule::AppendntriesRequest, ::RpcModule::AppendntriesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Appendntries_, context, request, response, std::move(f));
}

void Rafter::Stub::async::Appendntries(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest* request, ::RpcModule::AppendntriesReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Appendntries_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RpcModule::AppendntriesReply>* Rafter::Stub::PrepareAsyncAppendntriesRaw(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RpcModule::AppendntriesReply, ::RpcModule::AppendntriesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Appendntries_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RpcModule::AppendntriesReply>* Rafter::Stub::AsyncAppendntriesRaw(::grpc::ClientContext* context, const ::RpcModule::AppendntriesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAppendntriesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rafter::Stub::RequestVote(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest& request, ::RpcModule::RequestVoteReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RpcModule::RequestVoteRequest, ::RpcModule::RequestVoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RequestVote_, context, request, response);
}

void Rafter::Stub::async::RequestVote(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest* request, ::RpcModule::RequestVoteReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RpcModule::RequestVoteRequest, ::RpcModule::RequestVoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, std::move(f));
}

void Rafter::Stub::async::RequestVote(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest* request, ::RpcModule::RequestVoteReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RequestVote_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RpcModule::RequestVoteReply>* Rafter::Stub::PrepareAsyncRequestVoteRaw(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RpcModule::RequestVoteReply, ::RpcModule::RequestVoteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RequestVote_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RpcModule::RequestVoteReply>* Rafter::Stub::AsyncRequestVoteRaw(::grpc::ClientContext* context, const ::RpcModule::RequestVoteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRequestVoteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rafter::Stub::InstallSnapshot(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest& request, ::RpcModule::InstallSnapshotReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RpcModule::InstallSnapshotRequest, ::RpcModule::InstallSnapshotReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_InstallSnapshot_, context, request, response);
}

void Rafter::Stub::async::InstallSnapshot(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest* request, ::RpcModule::InstallSnapshotReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RpcModule::InstallSnapshotRequest, ::RpcModule::InstallSnapshotReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallSnapshot_, context, request, response, std::move(f));
}

void Rafter::Stub::async::InstallSnapshot(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest* request, ::RpcModule::InstallSnapshotReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_InstallSnapshot_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RpcModule::InstallSnapshotReply>* Rafter::Stub::PrepareAsyncInstallSnapshotRaw(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RpcModule::InstallSnapshotReply, ::RpcModule::InstallSnapshotRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_InstallSnapshot_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RpcModule::InstallSnapshotReply>* Rafter::Stub::AsyncInstallSnapshotRaw(::grpc::ClientContext* context, const ::RpcModule::InstallSnapshotRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncInstallSnapshotRaw(context, request, cq);
  result->StartCall();
  return result;
}

Rafter::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rafter_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rafter::Service, ::RpcModule::AppendntriesRequest, ::RpcModule::AppendntriesReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rafter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RpcModule::AppendntriesRequest* req,
             ::RpcModule::AppendntriesReply* resp) {
               return service->Appendntries(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rafter_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rafter::Service, ::RpcModule::RequestVoteRequest, ::RpcModule::RequestVoteReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rafter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RpcModule::RequestVoteRequest* req,
             ::RpcModule::RequestVoteReply* resp) {
               return service->RequestVote(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rafter_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rafter::Service, ::RpcModule::InstallSnapshotRequest, ::RpcModule::InstallSnapshotReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rafter::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RpcModule::InstallSnapshotRequest* req,
             ::RpcModule::InstallSnapshotReply* resp) {
               return service->InstallSnapshot(ctx, req, resp);
             }, this)));
}

Rafter::Service::~Service() {
}

::grpc::Status Rafter::Service::Appendntries(::grpc::ServerContext* context, const ::RpcModule::AppendntriesRequest* request, ::RpcModule::AppendntriesReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rafter::Service::RequestVote(::grpc::ServerContext* context, const ::RpcModule::RequestVoteRequest* request, ::RpcModule::RequestVoteReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rafter::Service::InstallSnapshot(::grpc::ServerContext* context, const ::RpcModule::InstallSnapshotRequest* request, ::RpcModule::InstallSnapshotReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace RpcModule

