// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: coordinator.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_coordinator_2eproto__INCLUDED
#define GRPC_coordinator_2eproto__INCLUDED

#include "coordinator.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace RpcModule {

// 请求消息服务开通
class Coordinator final {
 public:
  static constexpr char const* service_full_name() {
    return "RpcModule.Coordinator";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a Register sign to server
    virtual ::grpc::Status Register(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest& request, ::RpcModule::RegisterResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::RegisterResponse>> AsyncRegister(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::RegisterResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::RegisterResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::RegisterResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    virtual ::grpc::Status Example(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs& request, ::RpcModule::ExampleReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::ExampleReply>> AsyncExample(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::ExampleReply>>(AsyncExampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::ExampleReply>> PrepareAsyncExample(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::ExampleReply>>(PrepareAsyncExampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::RpcModule::TaskResultRequest>> TaskDone(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::RpcModule::TaskResultRequest>>(TaskDoneRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::RpcModule::TaskResultRequest>> AsyncTaskDone(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::RpcModule::TaskResultRequest>>(AsyncTaskDoneRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::RpcModule::TaskResultRequest>> PrepareAsyncTaskDone(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::RpcModule::TaskResultRequest>>(PrepareAsyncTaskDoneRaw(context, response, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Sends a Register sign to server
      virtual void Register(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest* request, ::RpcModule::RegisterResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Register(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest* request, ::RpcModule::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void Example(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs* request, ::RpcModule::ExampleReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Example(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs* request, ::RpcModule::ExampleReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void TaskDone(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response, ::grpc::ClientWriteReactor< ::RpcModule::TaskResultRequest>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::RegisterResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::RegisterResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::ExampleReply>* AsyncExampleRaw(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::ExampleReply>* PrepareAsyncExampleRaw(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::RpcModule::TaskResultRequest>* TaskDoneRaw(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::RpcModule::TaskResultRequest>* AsyncTaskDoneRaw(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::RpcModule::TaskResultRequest>* PrepareAsyncTaskDoneRaw(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status Register(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest& request, ::RpcModule::RegisterResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::RegisterResponse>> AsyncRegister(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::RegisterResponse>>(AsyncRegisterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::RegisterResponse>> PrepareAsyncRegister(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::RegisterResponse>>(PrepareAsyncRegisterRaw(context, request, cq));
    }
    ::grpc::Status Example(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs& request, ::RpcModule::ExampleReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::ExampleReply>> AsyncExample(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::ExampleReply>>(AsyncExampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::ExampleReply>> PrepareAsyncExample(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::ExampleReply>>(PrepareAsyncExampleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::RpcModule::TaskResultRequest>> TaskDone(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::RpcModule::TaskResultRequest>>(TaskDoneRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::RpcModule::TaskResultRequest>> AsyncTaskDone(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::RpcModule::TaskResultRequest>>(AsyncTaskDoneRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::RpcModule::TaskResultRequest>> PrepareAsyncTaskDone(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::RpcModule::TaskResultRequest>>(PrepareAsyncTaskDoneRaw(context, response, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Register(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest* request, ::RpcModule::RegisterResponse* response, std::function<void(::grpc::Status)>) override;
      void Register(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest* request, ::RpcModule::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void Example(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs* request, ::RpcModule::ExampleReply* response, std::function<void(::grpc::Status)>) override;
      void Example(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs* request, ::RpcModule::ExampleReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void TaskDone(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response, ::grpc::ClientWriteReactor< ::RpcModule::TaskResultRequest>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::RpcModule::RegisterResponse>* AsyncRegisterRaw(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RpcModule::RegisterResponse>* PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RpcModule::ExampleReply>* AsyncExampleRaw(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RpcModule::ExampleReply>* PrepareAsyncExampleRaw(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::RpcModule::TaskResultRequest>* TaskDoneRaw(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response) override;
    ::grpc::ClientAsyncWriter< ::RpcModule::TaskResultRequest>* AsyncTaskDoneRaw(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::RpcModule::TaskResultRequest>* PrepareAsyncTaskDoneRaw(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Register_;
    const ::grpc::internal::RpcMethod rpcmethod_Example_;
    const ::grpc::internal::RpcMethod rpcmethod_TaskDone_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a Register sign to server
    virtual ::grpc::Status Register(::grpc::ServerContext* context, const ::RpcModule::RegisterRequest* request, ::RpcModule::RegisterResponse* response);
    virtual ::grpc::Status Example(::grpc::ServerContext* context, const ::RpcModule::ExampleArgs* request, ::RpcModule::ExampleReply* response);
    virtual ::grpc::Status TaskDone(::grpc::ServerContext* context, ::grpc::ServerReader< ::RpcModule::TaskResultRequest>* reader, ::RpcModule::TaskRecvReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Register() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::RpcModule::RegisterRequest* /*request*/, ::RpcModule::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::RpcModule::RegisterRequest* request, ::grpc::ServerAsyncResponseWriter< ::RpcModule::RegisterResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Example : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Example() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Example() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Example(::grpc::ServerContext* /*context*/, const ::RpcModule::ExampleArgs* /*request*/, ::RpcModule::ExampleReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExample(::grpc::ServerContext* context, ::RpcModule::ExampleArgs* request, ::grpc::ServerAsyncResponseWriter< ::RpcModule::ExampleReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_TaskDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_TaskDone() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_TaskDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskDone(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::RpcModule::TaskResultRequest>* /*reader*/, ::RpcModule::TaskRecvReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTaskDone(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::RpcModule::TaskRecvReply, ::RpcModule::TaskResultRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Register<WithAsyncMethod_Example<WithAsyncMethod_TaskDone<Service > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Register() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::RpcModule::RegisterRequest, ::RpcModule::RegisterResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RpcModule::RegisterRequest* request, ::RpcModule::RegisterResponse* response) { return this->Register(context, request, response); }));}
    void SetMessageAllocatorFor_Register(
        ::grpc::MessageAllocator< ::RpcModule::RegisterRequest, ::RpcModule::RegisterResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RpcModule::RegisterRequest, ::RpcModule::RegisterResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::RpcModule::RegisterRequest* /*request*/, ::RpcModule::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::RpcModule::RegisterRequest* /*request*/, ::RpcModule::RegisterResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Example : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Example() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::RpcModule::ExampleArgs, ::RpcModule::ExampleReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RpcModule::ExampleArgs* request, ::RpcModule::ExampleReply* response) { return this->Example(context, request, response); }));}
    void SetMessageAllocatorFor_Example(
        ::grpc::MessageAllocator< ::RpcModule::ExampleArgs, ::RpcModule::ExampleReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RpcModule::ExampleArgs, ::RpcModule::ExampleReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Example() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Example(::grpc::ServerContext* /*context*/, const ::RpcModule::ExampleArgs* /*request*/, ::RpcModule::ExampleReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Example(
      ::grpc::CallbackServerContext* /*context*/, const ::RpcModule::ExampleArgs* /*request*/, ::RpcModule::ExampleReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_TaskDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_TaskDone() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::RpcModule::TaskResultRequest, ::RpcModule::TaskRecvReply>(
            [this](
                   ::grpc::CallbackServerContext* context, ::RpcModule::TaskRecvReply* response) { return this->TaskDone(context, response); }));
    }
    ~WithCallbackMethod_TaskDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskDone(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::RpcModule::TaskResultRequest>* /*reader*/, ::RpcModule::TaskRecvReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::RpcModule::TaskResultRequest>* TaskDone(
      ::grpc::CallbackServerContext* /*context*/, ::RpcModule::TaskRecvReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Register<WithCallbackMethod_Example<WithCallbackMethod_TaskDone<Service > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Register() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::RpcModule::RegisterRequest* /*request*/, ::RpcModule::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Example : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Example() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Example() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Example(::grpc::ServerContext* /*context*/, const ::RpcModule::ExampleArgs* /*request*/, ::RpcModule::ExampleReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_TaskDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_TaskDone() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_TaskDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskDone(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::RpcModule::TaskResultRequest>* /*reader*/, ::RpcModule::TaskRecvReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Register() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::RpcModule::RegisterRequest* /*request*/, ::RpcModule::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRegister(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Example : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Example() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Example() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Example(::grpc::ServerContext* /*context*/, const ::RpcModule::ExampleArgs* /*request*/, ::RpcModule::ExampleReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestExample(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_TaskDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_TaskDone() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_TaskDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskDone(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::RpcModule::TaskResultRequest>* /*reader*/, ::RpcModule::TaskRecvReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestTaskDone(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(2, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Register() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Register(context, request, response); }));
    }
    ~WithRawCallbackMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::RpcModule::RegisterRequest* /*request*/, ::RpcModule::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Register(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Example : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Example() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Example(context, request, response); }));
    }
    ~WithRawCallbackMethod_Example() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Example(::grpc::ServerContext* /*context*/, const ::RpcModule::ExampleArgs* /*request*/, ::RpcModule::ExampleReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Example(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_TaskDone : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_TaskDone() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->TaskDone(context, response); }));
    }
    ~WithRawCallbackMethod_TaskDone() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status TaskDone(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::RpcModule::TaskResultRequest>* /*reader*/, ::RpcModule::TaskRecvReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* TaskDone(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Register : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Register() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RpcModule::RegisterRequest, ::RpcModule::RegisterResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RpcModule::RegisterRequest, ::RpcModule::RegisterResponse>* streamer) {
                       return this->StreamedRegister(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Register() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Register(::grpc::ServerContext* /*context*/, const ::RpcModule::RegisterRequest* /*request*/, ::RpcModule::RegisterResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRegister(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RpcModule::RegisterRequest,::RpcModule::RegisterResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Example : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Example() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RpcModule::ExampleArgs, ::RpcModule::ExampleReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RpcModule::ExampleArgs, ::RpcModule::ExampleReply>* streamer) {
                       return this->StreamedExample(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Example() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Example(::grpc::ServerContext* /*context*/, const ::RpcModule::ExampleArgs* /*request*/, ::RpcModule::ExampleReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedExample(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RpcModule::ExampleArgs,::RpcModule::ExampleReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Example<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Register<WithStreamedUnaryMethod_Example<Service > > StreamedService;
};

}  // namespace RpcModule


#endif  // GRPC_coordinator_2eproto__INCLUDED
