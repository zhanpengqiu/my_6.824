// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: worker.proto
// Original file comments:
// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_worker_2eproto__INCLUDED
#define GRPC_worker_2eproto__INCLUDED

#include "worker.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace RpcModule {

// The greeting service definition.
class Worker final {
 public:
  static constexpr char const* service_full_name() {
    return "RpcModule.Worker";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Sends a greeting
    virtual ::grpc::Status CheckAlive(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest& request, ::RpcModule::CheckAliveReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::CheckAliveReply>> AsyncCheckAlive(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::CheckAliveReply>>(AsyncCheckAliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::CheckAliveReply>> PrepareAsyncCheckAlive(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::CheckAliveReply>>(PrepareAsyncCheckAliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriterInterface< ::RpcModule::AssignTaskRequest>> AssignTask(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::RpcModule::AssignTaskRequest>>(AssignTaskRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::RpcModule::AssignTaskRequest>> AsyncAssignTask(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::RpcModule::AssignTaskRequest>>(AsyncAssignTaskRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::RpcModule::AssignTaskRequest>> PrepareAsyncAssignTask(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::RpcModule::AssignTaskRequest>>(PrepareAsyncAssignTaskRaw(context, response, cq));
    }
    virtual ::grpc::Status GetFileContentRpc(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest& request, ::RpcModule::GetFileContentReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::GetFileContentReply>> AsyncGetFileContentRpc(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::GetFileContentReply>>(AsyncGetFileContentRpcRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::GetFileContentReply>> PrepareAsyncGetFileContentRpc(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::GetFileContentReply>>(PrepareAsyncGetFileContentRpcRaw(context, request, cq));
    }
    virtual ::grpc::Status QuitSign(::grpc::ClientContext* context, const ::RpcModule::QuitRequest& request, ::RpcModule::QuitReply* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::QuitReply>> AsyncQuitSign(::grpc::ClientContext* context, const ::RpcModule::QuitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::QuitReply>>(AsyncQuitSignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::QuitReply>> PrepareAsyncQuitSign(::grpc::ClientContext* context, const ::RpcModule::QuitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::QuitReply>>(PrepareAsyncQuitSignRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Sends a greeting
      virtual void CheckAlive(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest* request, ::RpcModule::CheckAliveReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CheckAlive(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest* request, ::RpcModule::CheckAliveReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void AssignTask(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response, ::grpc::ClientWriteReactor< ::RpcModule::AssignTaskRequest>* reactor) = 0;
      virtual void GetFileContentRpc(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest* request, ::RpcModule::GetFileContentReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetFileContentRpc(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest* request, ::RpcModule::GetFileContentReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void QuitSign(::grpc::ClientContext* context, const ::RpcModule::QuitRequest* request, ::RpcModule::QuitReply* response, std::function<void(::grpc::Status)>) = 0;
      virtual void QuitSign(::grpc::ClientContext* context, const ::RpcModule::QuitRequest* request, ::RpcModule::QuitReply* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::CheckAliveReply>* AsyncCheckAliveRaw(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::CheckAliveReply>* PrepareAsyncCheckAliveRaw(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientWriterInterface< ::RpcModule::AssignTaskRequest>* AssignTaskRaw(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::RpcModule::AssignTaskRequest>* AsyncAssignTaskRaw(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::RpcModule::AssignTaskRequest>* PrepareAsyncAssignTaskRaw(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::GetFileContentReply>* AsyncGetFileContentRpcRaw(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::GetFileContentReply>* PrepareAsyncGetFileContentRpcRaw(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::QuitReply>* AsyncQuitSignRaw(::grpc::ClientContext* context, const ::RpcModule::QuitRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::RpcModule::QuitReply>* PrepareAsyncQuitSignRaw(::grpc::ClientContext* context, const ::RpcModule::QuitRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CheckAlive(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest& request, ::RpcModule::CheckAliveReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::CheckAliveReply>> AsyncCheckAlive(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::CheckAliveReply>>(AsyncCheckAliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::CheckAliveReply>> PrepareAsyncCheckAlive(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::CheckAliveReply>>(PrepareAsyncCheckAliveRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientWriter< ::RpcModule::AssignTaskRequest>> AssignTask(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::RpcModule::AssignTaskRequest>>(AssignTaskRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::RpcModule::AssignTaskRequest>> AsyncAssignTask(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::RpcModule::AssignTaskRequest>>(AsyncAssignTaskRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::RpcModule::AssignTaskRequest>> PrepareAsyncAssignTask(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::RpcModule::AssignTaskRequest>>(PrepareAsyncAssignTaskRaw(context, response, cq));
    }
    ::grpc::Status GetFileContentRpc(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest& request, ::RpcModule::GetFileContentReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::GetFileContentReply>> AsyncGetFileContentRpc(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::GetFileContentReply>>(AsyncGetFileContentRpcRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::GetFileContentReply>> PrepareAsyncGetFileContentRpc(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::GetFileContentReply>>(PrepareAsyncGetFileContentRpcRaw(context, request, cq));
    }
    ::grpc::Status QuitSign(::grpc::ClientContext* context, const ::RpcModule::QuitRequest& request, ::RpcModule::QuitReply* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::QuitReply>> AsyncQuitSign(::grpc::ClientContext* context, const ::RpcModule::QuitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::QuitReply>>(AsyncQuitSignRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::QuitReply>> PrepareAsyncQuitSign(::grpc::ClientContext* context, const ::RpcModule::QuitRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::RpcModule::QuitReply>>(PrepareAsyncQuitSignRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CheckAlive(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest* request, ::RpcModule::CheckAliveReply* response, std::function<void(::grpc::Status)>) override;
      void CheckAlive(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest* request, ::RpcModule::CheckAliveReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void AssignTask(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response, ::grpc::ClientWriteReactor< ::RpcModule::AssignTaskRequest>* reactor) override;
      void GetFileContentRpc(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest* request, ::RpcModule::GetFileContentReply* response, std::function<void(::grpc::Status)>) override;
      void GetFileContentRpc(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest* request, ::RpcModule::GetFileContentReply* response, ::grpc::ClientUnaryReactor* reactor) override;
      void QuitSign(::grpc::ClientContext* context, const ::RpcModule::QuitRequest* request, ::RpcModule::QuitReply* response, std::function<void(::grpc::Status)>) override;
      void QuitSign(::grpc::ClientContext* context, const ::RpcModule::QuitRequest* request, ::RpcModule::QuitReply* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::RpcModule::CheckAliveReply>* AsyncCheckAliveRaw(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RpcModule::CheckAliveReply>* PrepareAsyncCheckAliveRaw(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientWriter< ::RpcModule::AssignTaskRequest>* AssignTaskRaw(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response) override;
    ::grpc::ClientAsyncWriter< ::RpcModule::AssignTaskRequest>* AsyncAssignTaskRaw(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::RpcModule::AssignTaskRequest>* PrepareAsyncAssignTaskRaw(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RpcModule::GetFileContentReply>* AsyncGetFileContentRpcRaw(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RpcModule::GetFileContentReply>* PrepareAsyncGetFileContentRpcRaw(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RpcModule::QuitReply>* AsyncQuitSignRaw(::grpc::ClientContext* context, const ::RpcModule::QuitRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::RpcModule::QuitReply>* PrepareAsyncQuitSignRaw(::grpc::ClientContext* context, const ::RpcModule::QuitRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CheckAlive_;
    const ::grpc::internal::RpcMethod rpcmethod_AssignTask_;
    const ::grpc::internal::RpcMethod rpcmethod_GetFileContentRpc_;
    const ::grpc::internal::RpcMethod rpcmethod_QuitSign_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Sends a greeting
    virtual ::grpc::Status CheckAlive(::grpc::ServerContext* context, const ::RpcModule::CheckAliveRequest* request, ::RpcModule::CheckAliveReply* response);
    virtual ::grpc::Status AssignTask(::grpc::ServerContext* context, ::grpc::ServerReader< ::RpcModule::AssignTaskRequest>* reader, ::RpcModule::AssignTaskReply* response);
    virtual ::grpc::Status GetFileContentRpc(::grpc::ServerContext* context, const ::RpcModule::GetFileContentRequest* request, ::RpcModule::GetFileContentReply* response);
    virtual ::grpc::Status QuitSign(::grpc::ServerContext* context, const ::RpcModule::QuitRequest* request, ::RpcModule::QuitReply* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CheckAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CheckAlive() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CheckAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckAlive(::grpc::ServerContext* /*context*/, const ::RpcModule::CheckAliveRequest* /*request*/, ::RpcModule::CheckAliveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckAlive(::grpc::ServerContext* context, ::RpcModule::CheckAliveRequest* request, ::grpc::ServerAsyncResponseWriter< ::RpcModule::CheckAliveReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_AssignTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_AssignTask() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_AssignTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignTask(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::RpcModule::AssignTaskRequest>* /*reader*/, ::RpcModule::AssignTaskReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAssignTask(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::RpcModule::AssignTaskReply, ::RpcModule::AssignTaskRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetFileContentRpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetFileContentRpc() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetFileContentRpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileContentRpc(::grpc::ServerContext* /*context*/, const ::RpcModule::GetFileContentRequest* /*request*/, ::RpcModule::GetFileContentReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileContentRpc(::grpc::ServerContext* context, ::RpcModule::GetFileContentRequest* request, ::grpc::ServerAsyncResponseWriter< ::RpcModule::GetFileContentReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_QuitSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_QuitSign() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_QuitSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuitSign(::grpc::ServerContext* /*context*/, const ::RpcModule::QuitRequest* /*request*/, ::RpcModule::QuitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuitSign(::grpc::ServerContext* context, ::RpcModule::QuitRequest* request, ::grpc::ServerAsyncResponseWriter< ::RpcModule::QuitReply>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CheckAlive<WithAsyncMethod_AssignTask<WithAsyncMethod_GetFileContentRpc<WithAsyncMethod_QuitSign<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CheckAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CheckAlive() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::RpcModule::CheckAliveRequest, ::RpcModule::CheckAliveReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RpcModule::CheckAliveRequest* request, ::RpcModule::CheckAliveReply* response) { return this->CheckAlive(context, request, response); }));}
    void SetMessageAllocatorFor_CheckAlive(
        ::grpc::MessageAllocator< ::RpcModule::CheckAliveRequest, ::RpcModule::CheckAliveReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RpcModule::CheckAliveRequest, ::RpcModule::CheckAliveReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CheckAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckAlive(::grpc::ServerContext* /*context*/, const ::RpcModule::CheckAliveRequest* /*request*/, ::RpcModule::CheckAliveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckAlive(
      ::grpc::CallbackServerContext* /*context*/, const ::RpcModule::CheckAliveRequest* /*request*/, ::RpcModule::CheckAliveReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_AssignTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_AssignTask() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::RpcModule::AssignTaskRequest, ::RpcModule::AssignTaskReply>(
            [this](
                   ::grpc::CallbackServerContext* context, ::RpcModule::AssignTaskReply* response) { return this->AssignTask(context, response); }));
    }
    ~WithCallbackMethod_AssignTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignTask(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::RpcModule::AssignTaskRequest>* /*reader*/, ::RpcModule::AssignTaskReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::RpcModule::AssignTaskRequest>* AssignTask(
      ::grpc::CallbackServerContext* /*context*/, ::RpcModule::AssignTaskReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetFileContentRpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetFileContentRpc() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::RpcModule::GetFileContentRequest, ::RpcModule::GetFileContentReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RpcModule::GetFileContentRequest* request, ::RpcModule::GetFileContentReply* response) { return this->GetFileContentRpc(context, request, response); }));}
    void SetMessageAllocatorFor_GetFileContentRpc(
        ::grpc::MessageAllocator< ::RpcModule::GetFileContentRequest, ::RpcModule::GetFileContentReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RpcModule::GetFileContentRequest, ::RpcModule::GetFileContentReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetFileContentRpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileContentRpc(::grpc::ServerContext* /*context*/, const ::RpcModule::GetFileContentRequest* /*request*/, ::RpcModule::GetFileContentReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFileContentRpc(
      ::grpc::CallbackServerContext* /*context*/, const ::RpcModule::GetFileContentRequest* /*request*/, ::RpcModule::GetFileContentReply* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_QuitSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_QuitSign() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::RpcModule::QuitRequest, ::RpcModule::QuitReply>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::RpcModule::QuitRequest* request, ::RpcModule::QuitReply* response) { return this->QuitSign(context, request, response); }));}
    void SetMessageAllocatorFor_QuitSign(
        ::grpc::MessageAllocator< ::RpcModule::QuitRequest, ::RpcModule::QuitReply>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::RpcModule::QuitRequest, ::RpcModule::QuitReply>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_QuitSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuitSign(::grpc::ServerContext* /*context*/, const ::RpcModule::QuitRequest* /*request*/, ::RpcModule::QuitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QuitSign(
      ::grpc::CallbackServerContext* /*context*/, const ::RpcModule::QuitRequest* /*request*/, ::RpcModule::QuitReply* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CheckAlive<WithCallbackMethod_AssignTask<WithCallbackMethod_GetFileContentRpc<WithCallbackMethod_QuitSign<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CheckAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CheckAlive() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CheckAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckAlive(::grpc::ServerContext* /*context*/, const ::RpcModule::CheckAliveRequest* /*request*/, ::RpcModule::CheckAliveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_AssignTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_AssignTask() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_AssignTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignTask(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::RpcModule::AssignTaskRequest>* /*reader*/, ::RpcModule::AssignTaskReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetFileContentRpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetFileContentRpc() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetFileContentRpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileContentRpc(::grpc::ServerContext* /*context*/, const ::RpcModule::GetFileContentRequest* /*request*/, ::RpcModule::GetFileContentReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_QuitSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_QuitSign() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_QuitSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuitSign(::grpc::ServerContext* /*context*/, const ::RpcModule::QuitRequest* /*request*/, ::RpcModule::QuitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CheckAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CheckAlive() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CheckAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckAlive(::grpc::ServerContext* /*context*/, const ::RpcModule::CheckAliveRequest* /*request*/, ::RpcModule::CheckAliveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCheckAlive(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_AssignTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_AssignTask() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_AssignTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignTask(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::RpcModule::AssignTaskRequest>* /*reader*/, ::RpcModule::AssignTaskReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestAssignTask(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(1, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetFileContentRpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetFileContentRpc() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetFileContentRpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileContentRpc(::grpc::ServerContext* /*context*/, const ::RpcModule::GetFileContentRequest* /*request*/, ::RpcModule::GetFileContentReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetFileContentRpc(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_QuitSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_QuitSign() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_QuitSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuitSign(::grpc::ServerContext* /*context*/, const ::RpcModule::QuitRequest* /*request*/, ::RpcModule::QuitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestQuitSign(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CheckAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CheckAlive() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CheckAlive(context, request, response); }));
    }
    ~WithRawCallbackMethod_CheckAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CheckAlive(::grpc::ServerContext* /*context*/, const ::RpcModule::CheckAliveRequest* /*request*/, ::RpcModule::CheckAliveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CheckAlive(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_AssignTask : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_AssignTask() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->AssignTask(context, response); }));
    }
    ~WithRawCallbackMethod_AssignTask() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status AssignTask(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::RpcModule::AssignTaskRequest>* /*reader*/, ::RpcModule::AssignTaskReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* AssignTask(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetFileContentRpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetFileContentRpc() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetFileContentRpc(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetFileContentRpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetFileContentRpc(::grpc::ServerContext* /*context*/, const ::RpcModule::GetFileContentRequest* /*request*/, ::RpcModule::GetFileContentReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetFileContentRpc(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_QuitSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_QuitSign() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->QuitSign(context, request, response); }));
    }
    ~WithRawCallbackMethod_QuitSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status QuitSign(::grpc::ServerContext* /*context*/, const ::RpcModule::QuitRequest* /*request*/, ::RpcModule::QuitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* QuitSign(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CheckAlive : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CheckAlive() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RpcModule::CheckAliveRequest, ::RpcModule::CheckAliveReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RpcModule::CheckAliveRequest, ::RpcModule::CheckAliveReply>* streamer) {
                       return this->StreamedCheckAlive(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CheckAlive() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CheckAlive(::grpc::ServerContext* /*context*/, const ::RpcModule::CheckAliveRequest* /*request*/, ::RpcModule::CheckAliveReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCheckAlive(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RpcModule::CheckAliveRequest,::RpcModule::CheckAliveReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetFileContentRpc : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetFileContentRpc() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RpcModule::GetFileContentRequest, ::RpcModule::GetFileContentReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RpcModule::GetFileContentRequest, ::RpcModule::GetFileContentReply>* streamer) {
                       return this->StreamedGetFileContentRpc(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetFileContentRpc() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetFileContentRpc(::grpc::ServerContext* /*context*/, const ::RpcModule::GetFileContentRequest* /*request*/, ::RpcModule::GetFileContentReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetFileContentRpc(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RpcModule::GetFileContentRequest,::RpcModule::GetFileContentReply>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_QuitSign : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_QuitSign() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::RpcModule::QuitRequest, ::RpcModule::QuitReply>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::RpcModule::QuitRequest, ::RpcModule::QuitReply>* streamer) {
                       return this->StreamedQuitSign(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_QuitSign() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status QuitSign(::grpc::ServerContext* /*context*/, const ::RpcModule::QuitRequest* /*request*/, ::RpcModule::QuitReply* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedQuitSign(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::RpcModule::QuitRequest,::RpcModule::QuitReply>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CheckAlive<WithStreamedUnaryMethod_GetFileContentRpc<WithStreamedUnaryMethod_QuitSign<Service > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CheckAlive<WithStreamedUnaryMethod_GetFileContentRpc<WithStreamedUnaryMethod_QuitSign<Service > > > StreamedService;
};

}  // namespace RpcModule


#endif  // GRPC_worker_2eproto__INCLUDED
