// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: worker.proto

#include "worker.pb.h"
#include "worker.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace RpcModule {

static const char* Worker_method_names[] = {
  "/RpcModule.Worker/CheckAlive",
  "/RpcModule.Worker/AssignTask",
  "/RpcModule.Worker/GetFileContentRpc",
  "/RpcModule.Worker/QuitSign",
};

std::unique_ptr< Worker::Stub> Worker::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Worker::Stub> stub(new Worker::Stub(channel, options));
  return stub;
}

Worker::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CheckAlive_(Worker_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_AssignTask_(Worker_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_GetFileContentRpc_(Worker_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_QuitSign_(Worker_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Worker::Stub::CheckAlive(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest& request, ::RpcModule::CheckAliveReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RpcModule::CheckAliveRequest, ::RpcModule::CheckAliveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CheckAlive_, context, request, response);
}

void Worker::Stub::async::CheckAlive(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest* request, ::RpcModule::CheckAliveReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RpcModule::CheckAliveRequest, ::RpcModule::CheckAliveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckAlive_, context, request, response, std::move(f));
}

void Worker::Stub::async::CheckAlive(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest* request, ::RpcModule::CheckAliveReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CheckAlive_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RpcModule::CheckAliveReply>* Worker::Stub::PrepareAsyncCheckAliveRaw(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RpcModule::CheckAliveReply, ::RpcModule::CheckAliveRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CheckAlive_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RpcModule::CheckAliveReply>* Worker::Stub::AsyncCheckAliveRaw(::grpc::ClientContext* context, const ::RpcModule::CheckAliveRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCheckAliveRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::RpcModule::AssignTaskRequest>* Worker::Stub::AssignTaskRaw(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response) {
  return ::grpc::internal::ClientWriterFactory< ::RpcModule::AssignTaskRequest>::Create(channel_.get(), rpcmethod_AssignTask_, context, response);
}

void Worker::Stub::async::AssignTask(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response, ::grpc::ClientWriteReactor< ::RpcModule::AssignTaskRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::RpcModule::AssignTaskRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_AssignTask_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::RpcModule::AssignTaskRequest>* Worker::Stub::AsyncAssignTaskRaw(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::RpcModule::AssignTaskRequest>::Create(channel_.get(), cq, rpcmethod_AssignTask_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::RpcModule::AssignTaskRequest>* Worker::Stub::PrepareAsyncAssignTaskRaw(::grpc::ClientContext* context, ::RpcModule::AssignTaskReply* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::RpcModule::AssignTaskRequest>::Create(channel_.get(), cq, rpcmethod_AssignTask_, context, response, false, nullptr);
}

::grpc::Status Worker::Stub::GetFileContentRpc(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest& request, ::RpcModule::GetFileContentReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RpcModule::GetFileContentRequest, ::RpcModule::GetFileContentReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetFileContentRpc_, context, request, response);
}

void Worker::Stub::async::GetFileContentRpc(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest* request, ::RpcModule::GetFileContentReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RpcModule::GetFileContentRequest, ::RpcModule::GetFileContentReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFileContentRpc_, context, request, response, std::move(f));
}

void Worker::Stub::async::GetFileContentRpc(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest* request, ::RpcModule::GetFileContentReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetFileContentRpc_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RpcModule::GetFileContentReply>* Worker::Stub::PrepareAsyncGetFileContentRpcRaw(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RpcModule::GetFileContentReply, ::RpcModule::GetFileContentRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetFileContentRpc_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RpcModule::GetFileContentReply>* Worker::Stub::AsyncGetFileContentRpcRaw(::grpc::ClientContext* context, const ::RpcModule::GetFileContentRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetFileContentRpcRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Worker::Stub::QuitSign(::grpc::ClientContext* context, const ::RpcModule::QuitRequest& request, ::RpcModule::QuitReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RpcModule::QuitRequest, ::RpcModule::QuitReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_QuitSign_, context, request, response);
}

void Worker::Stub::async::QuitSign(::grpc::ClientContext* context, const ::RpcModule::QuitRequest* request, ::RpcModule::QuitReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RpcModule::QuitRequest, ::RpcModule::QuitReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QuitSign_, context, request, response, std::move(f));
}

void Worker::Stub::async::QuitSign(::grpc::ClientContext* context, const ::RpcModule::QuitRequest* request, ::RpcModule::QuitReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_QuitSign_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RpcModule::QuitReply>* Worker::Stub::PrepareAsyncQuitSignRaw(::grpc::ClientContext* context, const ::RpcModule::QuitRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RpcModule::QuitReply, ::RpcModule::QuitRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_QuitSign_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RpcModule::QuitReply>* Worker::Stub::AsyncQuitSignRaw(::grpc::ClientContext* context, const ::RpcModule::QuitRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncQuitSignRaw(context, request, cq);
  result->StartCall();
  return result;
}

Worker::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::RpcModule::CheckAliveRequest, ::RpcModule::CheckAliveReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Worker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RpcModule::CheckAliveRequest* req,
             ::RpcModule::CheckAliveReply* resp) {
               return service->CheckAlive(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[1],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Worker::Service, ::RpcModule::AssignTaskRequest, ::RpcModule::AssignTaskReply>(
          [](Worker::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::RpcModule::AssignTaskRequest>* reader,
             ::RpcModule::AssignTaskReply* resp) {
               return service->AssignTask(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::RpcModule::GetFileContentRequest, ::RpcModule::GetFileContentReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Worker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RpcModule::GetFileContentRequest* req,
             ::RpcModule::GetFileContentReply* resp) {
               return service->GetFileContentRpc(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Worker_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Worker::Service, ::RpcModule::QuitRequest, ::RpcModule::QuitReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Worker::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RpcModule::QuitRequest* req,
             ::RpcModule::QuitReply* resp) {
               return service->QuitSign(ctx, req, resp);
             }, this)));
}

Worker::Service::~Service() {
}

::grpc::Status Worker::Service::CheckAlive(::grpc::ServerContext* context, const ::RpcModule::CheckAliveRequest* request, ::RpcModule::CheckAliveReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::AssignTask(::grpc::ServerContext* context, ::grpc::ServerReader< ::RpcModule::AssignTaskRequest>* reader, ::RpcModule::AssignTaskReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::GetFileContentRpc(::grpc::ServerContext* context, const ::RpcModule::GetFileContentRequest* request, ::RpcModule::GetFileContentReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Worker::Service::QuitSign(::grpc::ServerContext* context, const ::RpcModule::QuitRequest* request, ::RpcModule::QuitReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace RpcModule

