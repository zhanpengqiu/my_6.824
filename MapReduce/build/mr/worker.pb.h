// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worker.proto
// Protobuf C++ Version: 5.26.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_worker_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_worker_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION != 5026001
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_worker_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_worker_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_worker_2eproto;
namespace RpcModule {
class AssignTaskReply;
struct AssignTaskReplyDefaultTypeInternal;
extern AssignTaskReplyDefaultTypeInternal _AssignTaskReply_default_instance_;
class AssignTaskRequest;
struct AssignTaskRequestDefaultTypeInternal;
extern AssignTaskRequestDefaultTypeInternal _AssignTaskRequest_default_instance_;
class CheckAliveReply;
struct CheckAliveReplyDefaultTypeInternal;
extern CheckAliveReplyDefaultTypeInternal _CheckAliveReply_default_instance_;
class CheckAliveRequest;
struct CheckAliveRequestDefaultTypeInternal;
extern CheckAliveRequestDefaultTypeInternal _CheckAliveRequest_default_instance_;
class GetFileContentReply;
struct GetFileContentReplyDefaultTypeInternal;
extern GetFileContentReplyDefaultTypeInternal _GetFileContentReply_default_instance_;
class GetFileContentRequest;
struct GetFileContentRequestDefaultTypeInternal;
extern GetFileContentRequestDefaultTypeInternal _GetFileContentRequest_default_instance_;
class QuitReply;
struct QuitReplyDefaultTypeInternal;
extern QuitReplyDefaultTypeInternal _QuitReply_default_instance_;
class QuitRequest;
struct QuitRequestDefaultTypeInternal;
extern QuitRequestDefaultTypeInternal _QuitRequest_default_instance_;
}  // namespace RpcModule
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace RpcModule {

// ===================================================================


// -------------------------------------------------------------------

class QuitRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RpcModule.QuitRequest) */ {
 public:
  inline QuitRequest() : QuitRequest(nullptr) {}
  ~QuitRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QuitRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline QuitRequest(const QuitRequest& from) : QuitRequest(nullptr, from) {}
  inline QuitRequest(QuitRequest&& from) noexcept
      : QuitRequest(nullptr, std::move(from)) {}
  inline QuitRequest& operator=(const QuitRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitRequest& operator=(QuitRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuitRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuitRequest* internal_default_instance() {
    return reinterpret_cast<const QuitRequest*>(
        &_QuitRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(QuitRequest& a, QuitRequest& b) { a.Swap(&b); }
  inline void Swap(QuitRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuitRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuitRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<QuitRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QuitRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QuitRequest& from) { QuitRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(QuitRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RpcModule.QuitRequest"; }

 protected:
  explicit QuitRequest(::google::protobuf::Arena* arena);
  QuitRequest(::google::protobuf::Arena* arena, const QuitRequest& from);
  QuitRequest(::google::protobuf::Arena* arena, QuitRequest&& from) noexcept
      : QuitRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kQuitsignFieldNumber = 1,
  };
  // bool quitsign = 1;
  void clear_quitsign() ;
  bool quitsign() const;
  void set_quitsign(bool value);

  private:
  bool _internal_quitsign() const;
  void _internal_set_quitsign(bool value);

  public:
  // @@protoc_insertion_point(class_scope:RpcModule.QuitRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    bool quitsign_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_worker_2eproto;
};
// -------------------------------------------------------------------

class QuitReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RpcModule.QuitReply) */ {
 public:
  inline QuitReply() : QuitReply(nullptr) {}
  ~QuitReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR QuitReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline QuitReply(const QuitReply& from) : QuitReply(nullptr, from) {}
  inline QuitReply(QuitReply&& from) noexcept
      : QuitReply(nullptr, std::move(from)) {}
  inline QuitReply& operator=(const QuitReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuitReply& operator=(QuitReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuitReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuitReply* internal_default_instance() {
    return reinterpret_cast<const QuitReply*>(
        &_QuitReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(QuitReply& a, QuitReply& b) { a.Swap(&b); }
  inline void Swap(QuitReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuitReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuitReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<QuitReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QuitReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const QuitReply& from) { QuitReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(QuitReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RpcModule.QuitReply"; }

 protected:
  explicit QuitReply(::google::protobuf::Arena* arena);
  QuitReply(::google::protobuf::Arena* arena, const QuitReply& from);
  QuitReply(::google::protobuf::Arena* arena, QuitReply&& from) noexcept
      : QuitReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:RpcModule.QuitReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_worker_2eproto;
};
// -------------------------------------------------------------------

class GetFileContentRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RpcModule.GetFileContentRequest) */ {
 public:
  inline GetFileContentRequest() : GetFileContentRequest(nullptr) {}
  ~GetFileContentRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetFileContentRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetFileContentRequest(const GetFileContentRequest& from) : GetFileContentRequest(nullptr, from) {}
  inline GetFileContentRequest(GetFileContentRequest&& from) noexcept
      : GetFileContentRequest(nullptr, std::move(from)) {}
  inline GetFileContentRequest& operator=(const GetFileContentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileContentRequest& operator=(GetFileContentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFileContentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFileContentRequest* internal_default_instance() {
    return reinterpret_cast<const GetFileContentRequest*>(
        &_GetFileContentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(GetFileContentRequest& a, GetFileContentRequest& b) { a.Swap(&b); }
  inline void Swap(GetFileContentRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFileContentRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFileContentRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GetFileContentRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetFileContentRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetFileContentRequest& from) { GetFileContentRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetFileContentRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RpcModule.GetFileContentRequest"; }

 protected:
  explicit GetFileContentRequest(::google::protobuf::Arena* arena);
  GetFileContentRequest(::google::protobuf::Arena* arena, const GetFileContentRequest& from);
  GetFileContentRequest(::google::protobuf::Arena* arena, GetFileContentRequest&& from) noexcept
      : GetFileContentRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFilePathFieldNumber = 1,
  };
  // string file_path = 1;
  void clear_file_path() ;
  const std::string& file_path() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_file_path(Arg_&& arg, Args_... args);
  std::string* mutable_file_path();
  PROTOBUF_NODISCARD std::string* release_file_path();
  void set_allocated_file_path(std::string* value);

  private:
  const std::string& _internal_file_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_file_path(
      const std::string& value);
  std::string* _internal_mutable_file_path();

  public:
  // @@protoc_insertion_point(class_scope:RpcModule.GetFileContentRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      49, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr file_path_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_worker_2eproto;
};
// -------------------------------------------------------------------

class GetFileContentReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RpcModule.GetFileContentReply) */ {
 public:
  inline GetFileContentReply() : GetFileContentReply(nullptr) {}
  ~GetFileContentReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetFileContentReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetFileContentReply(const GetFileContentReply& from) : GetFileContentReply(nullptr, from) {}
  inline GetFileContentReply(GetFileContentReply&& from) noexcept
      : GetFileContentReply(nullptr, std::move(from)) {}
  inline GetFileContentReply& operator=(const GetFileContentReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetFileContentReply& operator=(GetFileContentReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetFileContentReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetFileContentReply* internal_default_instance() {
    return reinterpret_cast<const GetFileContentReply*>(
        &_GetFileContentReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(GetFileContentReply& a, GetFileContentReply& b) { a.Swap(&b); }
  inline void Swap(GetFileContentReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetFileContentReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetFileContentReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<GetFileContentReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetFileContentReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetFileContentReply& from) { GetFileContentReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(GetFileContentReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RpcModule.GetFileContentReply"; }

 protected:
  explicit GetFileContentReply(::google::protobuf::Arena* arena);
  GetFileContentReply(::google::protobuf::Arena* arena, const GetFileContentReply& from);
  GetFileContentReply(::google::protobuf::Arena* arena, GetFileContentReply&& from) noexcept
      : GetFileContentReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kContentFieldNumber = 1,
    kSuccessFieldNumber = 2,
  };
  // string content = 1;
  void clear_content() ;
  const std::string& content() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_content(Arg_&& arg, Args_... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* value);

  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(
      const std::string& value);
  std::string* _internal_mutable_content();

  public:
  // bool success = 2;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:RpcModule.GetFileContentReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      45, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr content_;
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_worker_2eproto;
};
// -------------------------------------------------------------------

class CheckAliveRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RpcModule.CheckAliveRequest) */ {
 public:
  inline CheckAliveRequest() : CheckAliveRequest(nullptr) {}
  ~CheckAliveRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CheckAliveRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline CheckAliveRequest(const CheckAliveRequest& from) : CheckAliveRequest(nullptr, from) {}
  inline CheckAliveRequest(CheckAliveRequest&& from) noexcept
      : CheckAliveRequest(nullptr, std::move(from)) {}
  inline CheckAliveRequest& operator=(const CheckAliveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckAliveRequest& operator=(CheckAliveRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckAliveRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckAliveRequest* internal_default_instance() {
    return reinterpret_cast<const CheckAliveRequest*>(
        &_CheckAliveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(CheckAliveRequest& a, CheckAliveRequest& b) { a.Swap(&b); }
  inline void Swap(CheckAliveRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckAliveRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckAliveRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CheckAliveRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CheckAliveRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CheckAliveRequest& from) { CheckAliveRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CheckAliveRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RpcModule.CheckAliveRequest"; }

 protected:
  explicit CheckAliveRequest(::google::protobuf::Arena* arena);
  CheckAliveRequest(::google::protobuf::Arena* arena, const CheckAliveRequest& from);
  CheckAliveRequest(::google::protobuf::Arena* arena, CheckAliveRequest&& from) noexcept
      : CheckAliveRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status() ;
  bool status() const;
  void set_status(bool value);

  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);

  public:
  // @@protoc_insertion_point(class_scope:RpcModule.CheckAliveRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    bool status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_worker_2eproto;
};
// -------------------------------------------------------------------

class CheckAliveReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RpcModule.CheckAliveReply) */ {
 public:
  inline CheckAliveReply() : CheckAliveReply(nullptr) {}
  ~CheckAliveReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CheckAliveReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline CheckAliveReply(const CheckAliveReply& from) : CheckAliveReply(nullptr, from) {}
  inline CheckAliveReply(CheckAliveReply&& from) noexcept
      : CheckAliveReply(nullptr, std::move(from)) {}
  inline CheckAliveReply& operator=(const CheckAliveReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CheckAliveReply& operator=(CheckAliveReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CheckAliveReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const CheckAliveReply* internal_default_instance() {
    return reinterpret_cast<const CheckAliveReply*>(
        &_CheckAliveReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(CheckAliveReply& a, CheckAliveReply& b) { a.Swap(&b); }
  inline void Swap(CheckAliveReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CheckAliveReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CheckAliveReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<CheckAliveReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CheckAliveReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CheckAliveReply& from) { CheckAliveReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(CheckAliveReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RpcModule.CheckAliveReply"; }

 protected:
  explicit CheckAliveReply(::google::protobuf::Arena* arena);
  CheckAliveReply(::google::protobuf::Arena* arena, const CheckAliveReply& from);
  CheckAliveReply(::google::protobuf::Arena* arena, CheckAliveReply&& from) noexcept
      : CheckAliveReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStatusFieldNumber = 1,
  };
  // bool status = 1;
  void clear_status() ;
  bool status() const;
  void set_status(bool value);

  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);

  public:
  // @@protoc_insertion_point(class_scope:RpcModule.CheckAliveReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    bool status_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_worker_2eproto;
};
// -------------------------------------------------------------------

class AssignTaskRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RpcModule.AssignTaskRequest) */ {
 public:
  inline AssignTaskRequest() : AssignTaskRequest(nullptr) {}
  ~AssignTaskRequest() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AssignTaskRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline AssignTaskRequest(const AssignTaskRequest& from) : AssignTaskRequest(nullptr, from) {}
  inline AssignTaskRequest(AssignTaskRequest&& from) noexcept
      : AssignTaskRequest(nullptr, std::move(from)) {}
  inline AssignTaskRequest& operator=(const AssignTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignTaskRequest& operator=(AssignTaskRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssignTaskRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssignTaskRequest* internal_default_instance() {
    return reinterpret_cast<const AssignTaskRequest*>(
        &_AssignTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(AssignTaskRequest& a, AssignTaskRequest& b) { a.Swap(&b); }
  inline void Swap(AssignTaskRequest* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssignTaskRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssignTaskRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AssignTaskRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AssignTaskRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AssignTaskRequest& from) { AssignTaskRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AssignTaskRequest* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RpcModule.AssignTaskRequest"; }

 protected:
  explicit AssignTaskRequest(::google::protobuf::Arena* arena);
  AssignTaskRequest(::google::protobuf::Arena* arena, const AssignTaskRequest& from);
  AssignTaskRequest(::google::protobuf::Arena* arena, AssignTaskRequest&& from) noexcept
      : AssignTaskRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kIpFieldNumber = 1,
    kTaskFieldNumber = 3,
    kPortFieldNumber = 2,
    kTaskIdFieldNumber = 4,
    kTaskTypeFieldNumber = 5,
  };
  // string ip = 1;
  void clear_ip() ;
  const std::string& ip() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_ip(Arg_&& arg, Args_... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* value);

  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(
      const std::string& value);
  std::string* _internal_mutable_ip();

  public:
  // string task = 3;
  void clear_task() ;
  const std::string& task() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_task(Arg_&& arg, Args_... args);
  std::string* mutable_task();
  PROTOBUF_NODISCARD std::string* release_task();
  void set_allocated_task(std::string* value);

  private:
  const std::string& _internal_task() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task(
      const std::string& value);
  std::string* _internal_mutable_task();

  public:
  // int32 port = 2;
  void clear_port() ;
  ::int32_t port() const;
  void set_port(::int32_t value);

  private:
  ::int32_t _internal_port() const;
  void _internal_set_port(::int32_t value);

  public:
  // int32 task_id = 4;
  void clear_task_id() ;
  ::int32_t task_id() const;
  void set_task_id(::int32_t value);

  private:
  ::int32_t _internal_task_id() const;
  void _internal_set_task_id(::int32_t value);

  public:
  // int32 task_type = 5;
  void clear_task_type() ;
  ::int32_t task_type() const;
  void set_task_type(::int32_t value);

  private:
  ::int32_t _internal_task_type() const;
  void _internal_set_task_type(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:RpcModule.AssignTaskRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      42, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr ip_;
    ::google::protobuf::internal::ArenaStringPtr task_;
    ::int32_t port_;
    ::int32_t task_id_;
    ::int32_t task_type_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_worker_2eproto;
};
// -------------------------------------------------------------------

class AssignTaskReply final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:RpcModule.AssignTaskReply) */ {
 public:
  inline AssignTaskReply() : AssignTaskReply(nullptr) {}
  ~AssignTaskReply() override;
  template <typename = void>
  explicit PROTOBUF_CONSTEXPR AssignTaskReply(
      ::google::protobuf::internal::ConstantInitialized);

  inline AssignTaskReply(const AssignTaskReply& from) : AssignTaskReply(nullptr, from) {}
  inline AssignTaskReply(AssignTaskReply&& from) noexcept
      : AssignTaskReply(nullptr, std::move(from)) {}
  inline AssignTaskReply& operator=(const AssignTaskReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AssignTaskReply& operator=(AssignTaskReply&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
#ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
#endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AssignTaskReply& default_instance() {
    return *internal_default_instance();
  }
  static inline const AssignTaskReply* internal_default_instance() {
    return reinterpret_cast<const AssignTaskReply*>(
        &_AssignTaskReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(AssignTaskReply& a, AssignTaskReply& b) { a.Swap(&b); }
  inline void Swap(AssignTaskReply* other) {
    if (other == this) return;
#ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr && GetArena() == other->GetArena()) {
#else   // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
#endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AssignTaskReply* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AssignTaskReply* New(::google::protobuf::Arena* arena = nullptr) const final {
    return ::google::protobuf::Message::DefaultConstruct<AssignTaskReply>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const AssignTaskReply& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const AssignTaskReply& from) { AssignTaskReply::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(AssignTaskReply* other);
 private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() { return "RpcModule.AssignTaskReply"; }

 protected:
  explicit AssignTaskReply(::google::protobuf::Arena* arena);
  AssignTaskReply(::google::protobuf::Arena* arena, const AssignTaskReply& from);
  AssignTaskReply(::google::protobuf::Arena* arena, AssignTaskReply&& from) noexcept
      : AssignTaskReply(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::MessageLite::ClassData* GetClassData()
      const final;

 public:
  ::google::protobuf::Metadata GetMetadata() const final;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success() ;
  bool success() const;
  void set_success(bool value);

  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);

  public:
  // @@protoc_insertion_point(class_scope:RpcModule.AssignTaskReply)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from);
    bool success_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_worker_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// CheckAliveRequest

// bool status = 1;
inline void CheckAliveRequest::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = false;
}
inline bool CheckAliveRequest::status() const {
  // @@protoc_insertion_point(field_get:RpcModule.CheckAliveRequest.status)
  return _internal_status();
}
inline void CheckAliveRequest::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:RpcModule.CheckAliveRequest.status)
}
inline bool CheckAliveRequest::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_;
}
inline void CheckAliveRequest::_internal_set_status(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// CheckAliveReply

// bool status = 1;
inline void CheckAliveReply::clear_status() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = false;
}
inline bool CheckAliveReply::status() const {
  // @@protoc_insertion_point(field_get:RpcModule.CheckAliveReply.status)
  return _internal_status();
}
inline void CheckAliveReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:RpcModule.CheckAliveReply.status)
}
inline bool CheckAliveReply::_internal_status() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.status_;
}
inline void CheckAliveReply::_internal_set_status(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.status_ = value;
}

// -------------------------------------------------------------------

// QuitRequest

// bool quitsign = 1;
inline void QuitRequest::clear_quitsign() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.quitsign_ = false;
}
inline bool QuitRequest::quitsign() const {
  // @@protoc_insertion_point(field_get:RpcModule.QuitRequest.quitsign)
  return _internal_quitsign();
}
inline void QuitRequest::set_quitsign(bool value) {
  _internal_set_quitsign(value);
  // @@protoc_insertion_point(field_set:RpcModule.QuitRequest.quitsign)
}
inline bool QuitRequest::_internal_quitsign() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.quitsign_;
}
inline void QuitRequest::_internal_set_quitsign(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.quitsign_ = value;
}

// -------------------------------------------------------------------

// QuitReply

// bool success = 1;
inline void QuitReply::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool QuitReply::success() const {
  // @@protoc_insertion_point(field_get:RpcModule.QuitReply.success)
  return _internal_success();
}
inline void QuitReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:RpcModule.QuitReply.success)
}
inline bool QuitReply::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void QuitReply::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// AssignTaskRequest

// string ip = 1;
inline void AssignTaskRequest::clear_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.ClearToEmpty();
}
inline const std::string& AssignTaskRequest::ip() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RpcModule.AssignTaskRequest.ip)
  return _internal_ip();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssignTaskRequest::set_ip(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RpcModule.AssignTaskRequest.ip)
}
inline std::string* AssignTaskRequest::mutable_ip() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:RpcModule.AssignTaskRequest.ip)
  return _s;
}
inline const std::string& AssignTaskRequest::_internal_ip() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.ip_.Get();
}
inline void AssignTaskRequest::_internal_set_ip(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.Set(value, GetArena());
}
inline std::string* AssignTaskRequest::_internal_mutable_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.ip_.Mutable( GetArena());
}
inline std::string* AssignTaskRequest::release_ip() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RpcModule.AssignTaskRequest.ip)
  return _impl_.ip_.Release();
}
inline void AssignTaskRequest::set_allocated_ip(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.ip_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.ip_.IsDefault()) {
          _impl_.ip_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RpcModule.AssignTaskRequest.ip)
}

// int32 port = 2;
inline void AssignTaskRequest::clear_port() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = 0;
}
inline ::int32_t AssignTaskRequest::port() const {
  // @@protoc_insertion_point(field_get:RpcModule.AssignTaskRequest.port)
  return _internal_port();
}
inline void AssignTaskRequest::set_port(::int32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:RpcModule.AssignTaskRequest.port)
}
inline ::int32_t AssignTaskRequest::_internal_port() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.port_;
}
inline void AssignTaskRequest::_internal_set_port(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.port_ = value;
}

// string task = 3;
inline void AssignTaskRequest::clear_task() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.task_.ClearToEmpty();
}
inline const std::string& AssignTaskRequest::task() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RpcModule.AssignTaskRequest.task)
  return _internal_task();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void AssignTaskRequest::set_task(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.task_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RpcModule.AssignTaskRequest.task)
}
inline std::string* AssignTaskRequest::mutable_task() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_task();
  // @@protoc_insertion_point(field_mutable:RpcModule.AssignTaskRequest.task)
  return _s;
}
inline const std::string& AssignTaskRequest::_internal_task() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.task_.Get();
}
inline void AssignTaskRequest::_internal_set_task(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.task_.Set(value, GetArena());
}
inline std::string* AssignTaskRequest::_internal_mutable_task() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.task_.Mutable( GetArena());
}
inline std::string* AssignTaskRequest::release_task() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RpcModule.AssignTaskRequest.task)
  return _impl_.task_.Release();
}
inline void AssignTaskRequest::set_allocated_task(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.task_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.task_.IsDefault()) {
          _impl_.task_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RpcModule.AssignTaskRequest.task)
}

// int32 task_id = 4;
inline void AssignTaskRequest::clear_task_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.task_id_ = 0;
}
inline ::int32_t AssignTaskRequest::task_id() const {
  // @@protoc_insertion_point(field_get:RpcModule.AssignTaskRequest.task_id)
  return _internal_task_id();
}
inline void AssignTaskRequest::set_task_id(::int32_t value) {
  _internal_set_task_id(value);
  // @@protoc_insertion_point(field_set:RpcModule.AssignTaskRequest.task_id)
}
inline ::int32_t AssignTaskRequest::_internal_task_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.task_id_;
}
inline void AssignTaskRequest::_internal_set_task_id(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.task_id_ = value;
}

// int32 task_type = 5;
inline void AssignTaskRequest::clear_task_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.task_type_ = 0;
}
inline ::int32_t AssignTaskRequest::task_type() const {
  // @@protoc_insertion_point(field_get:RpcModule.AssignTaskRequest.task_type)
  return _internal_task_type();
}
inline void AssignTaskRequest::set_task_type(::int32_t value) {
  _internal_set_task_type(value);
  // @@protoc_insertion_point(field_set:RpcModule.AssignTaskRequest.task_type)
}
inline ::int32_t AssignTaskRequest::_internal_task_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.task_type_;
}
inline void AssignTaskRequest::_internal_set_task_type(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.task_type_ = value;
}

// -------------------------------------------------------------------

// AssignTaskReply

// bool success = 1;
inline void AssignTaskReply::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool AssignTaskReply::success() const {
  // @@protoc_insertion_point(field_get:RpcModule.AssignTaskReply.success)
  return _internal_success();
}
inline void AssignTaskReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:RpcModule.AssignTaskReply.success)
}
inline bool AssignTaskReply::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void AssignTaskReply::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = value;
}

// -------------------------------------------------------------------

// GetFileContentRequest

// string file_path = 1;
inline void GetFileContentRequest::clear_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_path_.ClearToEmpty();
}
inline const std::string& GetFileContentRequest::file_path() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RpcModule.GetFileContentRequest.file_path)
  return _internal_file_path();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetFileContentRequest::set_file_path(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_path_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RpcModule.GetFileContentRequest.file_path)
}
inline std::string* GetFileContentRequest::mutable_file_path() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_file_path();
  // @@protoc_insertion_point(field_mutable:RpcModule.GetFileContentRequest.file_path)
  return _s;
}
inline const std::string& GetFileContentRequest::_internal_file_path() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.file_path_.Get();
}
inline void GetFileContentRequest::_internal_set_file_path(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_path_.Set(value, GetArena());
}
inline std::string* GetFileContentRequest::_internal_mutable_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.file_path_.Mutable( GetArena());
}
inline std::string* GetFileContentRequest::release_file_path() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RpcModule.GetFileContentRequest.file_path)
  return _impl_.file_path_.Release();
}
inline void GetFileContentRequest::set_allocated_file_path(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.file_path_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.file_path_.IsDefault()) {
          _impl_.file_path_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RpcModule.GetFileContentRequest.file_path)
}

// -------------------------------------------------------------------

// GetFileContentReply

// string content = 1;
inline void GetFileContentReply::clear_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.ClearToEmpty();
}
inline const std::string& GetFileContentReply::content() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:RpcModule.GetFileContentReply.content)
  return _internal_content();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetFileContentReply::set_content(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:RpcModule.GetFileContentReply.content)
}
inline std::string* GetFileContentReply::mutable_content() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:RpcModule.GetFileContentReply.content)
  return _s;
}
inline const std::string& GetFileContentReply::_internal_content() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.content_.Get();
}
inline void GetFileContentReply::_internal_set_content(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.Set(value, GetArena());
}
inline std::string* GetFileContentReply::_internal_mutable_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _impl_.content_.Mutable( GetArena());
}
inline std::string* GetFileContentReply::release_content() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:RpcModule.GetFileContentReply.content)
  return _impl_.content_.Release();
}
inline void GetFileContentReply::set_allocated_content(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.content_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.content_.IsDefault()) {
          _impl_.content_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:RpcModule.GetFileContentReply.content)
}

// bool success = 2;
inline void GetFileContentReply::clear_success() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = false;
}
inline bool GetFileContentReply::success() const {
  // @@protoc_insertion_point(field_get:RpcModule.GetFileContentReply.success)
  return _internal_success();
}
inline void GetFileContentReply::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:RpcModule.GetFileContentReply.success)
}
inline bool GetFileContentReply::_internal_success() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.success_;
}
inline void GetFileContentReply::_internal_set_success(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.success_ = value;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace RpcModule


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_worker_2eproto_2epb_2eh
