// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: coordinator.proto

#include "coordinator.pb.h"
#include "coordinator.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace RpcModule {

static const char* Coordinator_method_names[] = {
  "/RpcModule.Coordinator/Register",
  "/RpcModule.Coordinator/Example",
  "/RpcModule.Coordinator/TaskDone",
};

std::unique_ptr< Coordinator::Stub> Coordinator::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Coordinator::Stub> stub(new Coordinator::Stub(channel, options));
  return stub;
}

Coordinator::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Register_(Coordinator_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Example_(Coordinator_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_TaskDone_(Coordinator_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  {}

::grpc::Status Coordinator::Stub::Register(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest& request, ::RpcModule::RegisterResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RpcModule::RegisterRequest, ::RpcModule::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Register_, context, request, response);
}

void Coordinator::Stub::async::Register(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest* request, ::RpcModule::RegisterResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RpcModule::RegisterRequest, ::RpcModule::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, std::move(f));
}

void Coordinator::Stub::async::Register(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest* request, ::RpcModule::RegisterResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Register_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RpcModule::RegisterResponse>* Coordinator::Stub::PrepareAsyncRegisterRaw(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RpcModule::RegisterResponse, ::RpcModule::RegisterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Register_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RpcModule::RegisterResponse>* Coordinator::Stub::AsyncRegisterRaw(::grpc::ClientContext* context, const ::RpcModule::RegisterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRegisterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Coordinator::Stub::Example(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs& request, ::RpcModule::ExampleReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::RpcModule::ExampleArgs, ::RpcModule::ExampleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Example_, context, request, response);
}

void Coordinator::Stub::async::Example(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs* request, ::RpcModule::ExampleReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::RpcModule::ExampleArgs, ::RpcModule::ExampleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Example_, context, request, response, std::move(f));
}

void Coordinator::Stub::async::Example(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs* request, ::RpcModule::ExampleReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Example_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::RpcModule::ExampleReply>* Coordinator::Stub::PrepareAsyncExampleRaw(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::RpcModule::ExampleReply, ::RpcModule::ExampleArgs, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Example_, context, request);
}

::grpc::ClientAsyncResponseReader< ::RpcModule::ExampleReply>* Coordinator::Stub::AsyncExampleRaw(::grpc::ClientContext* context, const ::RpcModule::ExampleArgs& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncExampleRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientWriter< ::RpcModule::TaskResultRequest>* Coordinator::Stub::TaskDoneRaw(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response) {
  return ::grpc::internal::ClientWriterFactory< ::RpcModule::TaskResultRequest>::Create(channel_.get(), rpcmethod_TaskDone_, context, response);
}

void Coordinator::Stub::async::TaskDone(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response, ::grpc::ClientWriteReactor< ::RpcModule::TaskResultRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::RpcModule::TaskResultRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_TaskDone_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::RpcModule::TaskResultRequest>* Coordinator::Stub::AsyncTaskDoneRaw(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::RpcModule::TaskResultRequest>::Create(channel_.get(), cq, rpcmethod_TaskDone_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::RpcModule::TaskResultRequest>* Coordinator::Stub::PrepareAsyncTaskDoneRaw(::grpc::ClientContext* context, ::RpcModule::TaskRecvReply* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::RpcModule::TaskResultRequest>::Create(channel_.get(), cq, rpcmethod_TaskDone_, context, response, false, nullptr);
}

Coordinator::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Coordinator_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Coordinator::Service, ::RpcModule::RegisterRequest, ::RpcModule::RegisterResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Coordinator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RpcModule::RegisterRequest* req,
             ::RpcModule::RegisterResponse* resp) {
               return service->Register(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Coordinator_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Coordinator::Service, ::RpcModule::ExampleArgs, ::RpcModule::ExampleReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Coordinator::Service* service,
             ::grpc::ServerContext* ctx,
             const ::RpcModule::ExampleArgs* req,
             ::RpcModule::ExampleReply* resp) {
               return service->Example(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Coordinator_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< Coordinator::Service, ::RpcModule::TaskResultRequest, ::RpcModule::TaskRecvReply>(
          [](Coordinator::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::RpcModule::TaskResultRequest>* reader,
             ::RpcModule::TaskRecvReply* resp) {
               return service->TaskDone(ctx, reader, resp);
             }, this)));
}

Coordinator::Service::~Service() {
}

::grpc::Status Coordinator::Service::Register(::grpc::ServerContext* context, const ::RpcModule::RegisterRequest* request, ::RpcModule::RegisterResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Coordinator::Service::Example(::grpc::ServerContext* context, const ::RpcModule::ExampleArgs* request, ::RpcModule::ExampleReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Coordinator::Service::TaskDone(::grpc::ServerContext* context, ::grpc::ServerReader< ::RpcModule::TaskResultRequest>* reader, ::RpcModule::TaskRecvReply* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace RpcModule

